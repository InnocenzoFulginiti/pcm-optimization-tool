//
// Created by Jakob on 31/01/2023.
//

#ifndef QCPROP_QUBITSTATE_HPP
#define QCPROP_QUBITSTATE_HPP


#include <map>
#include <complex>
#include <bitset>
#include "util/Complex.hpp"
#include <iostream>
#include "util/BitSet.hpp"
#include "operations/OpType.hpp"

class QubitState {
public:
    explicit QubitState(int nQubits);

    ~QubitState() = default;

    [[nodiscard]] size_t size() const;

    [[nodiscard]] size_t getNQubits() const;

    void clear() {
        this->map.clear();
    }

    void print(std::ostream &os) const;

    //Iterator over map entries
    typedef std::map<BitSet, Complex>::iterator iterator;

    /**
     * Combine Quantum States by applying the tensor product
     * New keys are generated by sorting the indices in ascending order
     * LSB of the Key is smallest index
     * @param qubitState1
     * @param indices1 - in ascending order
     * @param qubitState2
     * @param indices2 - in ascending order
     * @return
     */
    static std::shared_ptr<QubitState>
    combine(const std::shared_ptr<QubitState> &qubitState1, std::vector<int> indices1,
            const std::shared_ptr<QubitState> &qubitState2, std::vector<int> indices2);

    iterator begin() {
        return this->map.begin();
    }

    iterator end() {
        return this->map.end();
    }

    //Define operator []
    Complex &operator[](const BitSet &key) {
        return this->map.operator[](key);
    }

    //Define operator <<
    friend std::ostream &operator<<(std::ostream &os, const QubitState &qubitState) {
        qubitState.print(os);
        return os;
    }

    //to_string
    [[nodiscard]] std::string to_string() const;

    /**
     * @return Sum of all probabilities. This should always be 1
     */
    [[nodiscard]] double norm() const;

    void normalize();

    QubitState applyGate(size_t index, Complex *matrix) const;
private:
    size_t nQubits;
    std::map<BitSet, Complex> map;

    [[nodiscard]] int countQubitIisZero(int qubit) const;

    [[nodiscard]] int countQubitIisOne(int qubit) const;

    void removeZeroEntries();
};


#endif //QCPROP_QUBITSTATE_HPP
